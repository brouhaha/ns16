/*
Copyright 1995, 2004, 2005, 2006, 2007, 2008, 2009 Eric Smith <eric@brouhaha.com>
All rights reserved.
$Id: pasm.h,v 1.1 2009/05/10 00:23:51 eric Exp eric $
*/

extern int pass;
extern int errors;

extern bool parse_error;


typedef enum { ASECT, BSECT, MAX_SECTION } section_t;
void set_section (section_t section);

extern addr_t pc;	/* current pc */


#define MAX_LINE 256
extern char linebuf [MAX_LINE];
extern char *lineptr;


void pseudo_include (char *s);

bool get_cond_state (void);
int  get_lineno (void);

void pseudo_if (int val);
void pseudo_ifdef (char *s);
void pseudo_else (void);
void pseudo_endif (void);


extern symtab_t *symtab;


void define_symbol (char *s, uword_t value);
void do_label (char *s);


void show_value (uword_t value);

void emit        (uword_t op);
void emit_string (char *s);

uword_t literal_pool_addr (uword_t value);


typedef struct field_t
{
  struct field_t *next;
  int width;
  int rightmost_bit;
} field_t;

typedef struct form_t
{
  struct form_t *next;
  char *name;
  uword_t constant_value;
  int leftmost_bit_avail;
  field_t *first_field;
  field_t *last_field;
  field_t *current_field;
} form_t;

extern form_t *current_form;

void create_form (char *name);
void add_form_field (int width, bool is_constant, int value);
form_t *find_form (char *name);
uword_t field_value (uword_t v);


/*
 * Check that val is in the range [min, max].  If so, return val.
 * If not, issue an error and return min.
 */
uword_t u_range (uword_t val, uword_t min, uword_t max);
sword_t s_range (sword_t val, sword_t min, sword_t max);

bool in_s_range (sword_t val, sword_t min, sword_t max);


/*
 * print to both listing error buffer and standard error
 *
 * Use this for general messages.  Don't use this for warnings or errors
 * generated by a particular line of the source file.  Use error() or
 * warning() for that.
 */
int err_printf (char *format, ...);

/* generate error or warning messages and increment appropriate counter */
int error       (char *format, ...);
int asm_warning (char *format, ...);


/* lexers: */

//int pasm_lex     (void);


/* parser, defined in iasmy.y and pasmy.y */

void parse     (void);
