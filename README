NStools: Assembler and Simulator for the National Semiconductor PACE

Copyright 2009 Eric Smith <eric@brouhaha.com>
All rights reserved.
$Id$

NOTE: NStools is NOT "open-source".  It may be licensed for
open-source distribution at a later date, but currently no
redistribution is authorized.

NStools provides a crude assembler and simulator for the National
Semiconductor PACE, which was the first monolithic 16-bit
microprocessor.

NStools is supplied with a copy of fig-FORTH for the PACE.  The
original code (plus any typographical errors I may have introduced)
is in the file figforth_pace.orig.asm.  This file is in the public
domain.

A version of fig-FORTH with a bug in USLASH fixed and minor changes to
suit the simulator is in the file figforth_pace.asm.

Currently the aim is to assemble and simulate PACE code just well
enough to run fig-FORTH.  The assembler only recognizes the minimum
set of pseudo-ops necessary to assemble fig-FORTH, and some of them
are ignored.  The simulator does not implement all of the PACE
instructions; in particular, the DECA (decimal add) instruction is not
implemented.  Interrupts are not implemented.  None of the
instructions are well tested, so there are likely to be lurking bugs.

The assembler is written in C, LEX, and YACC.  It has been compiled with
GCC 4.0.1, Flex 2.5.33, and GNU Bison 2.3.  Other compilers may work but
have not been tested.  The simulator is written in C.

Like the National Semiconductor assembler, pasm will automatically
generate indirect words for out-of-range jumps and subroutine calls.
However, the order of these indirect words may be different than those
generated by the National Semiconductor assembler.

To compile NStools, you will need Python and SCons.  SCons is an
alternative to make and is available from:

	http://www.scons.org/

To compile NStools, simply type:

	scons

This will build pasm and psim, and assemble fig-FORTH.

To assemble a file foo.asm, type:

	pasm -o foo.obj -l foo.lst foo.asm

Note that on Linux or Unix systems, the current directory will not
be in the execution path, so you will need to give the command
as

	./pasm -o foo.obj -l foo.lst foo.asm

The only I/O currently simulated is a serial console, via the host
system standard input and output.  The simulator special-cases code
execution at addresses 7E3B, 7E44, and 7ECC for the input character,
output character, and test input ready functions.  (These addresses
were chosen simply because the PACE fig-FORTH uses them.)

To execute the simulator on most operating systems, type:

	psim

Note that on Linux or Unix systems, the current directory will not
be in the execution path, so you will need to give the command
as

	./psim

The simulator will load and execute the Pace object file
"figforth_pace.obj".

I'm no FORTH expert, but here are a few trivial things you can type
in to see that it works:

	1 2 + .

Should add one and two, and print the result 3.

       : FOO 27 * 5 + ;

Defines a word FOO that takes the number on the top of the stack,
multiplies it by 27, and adds 5.

	-3 FOO .

Should print -76.

	: OE 1 AND IF ." ODD" ELSE ." EVEN" ENDIF ;

Defines a word OE that prints ODD or EVEN depending on the number
on the top of the stack.

	4 OE

will print "EVEN", while

	5 OE

will print "ODD".
